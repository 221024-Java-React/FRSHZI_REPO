package Utils;

import java.awt.Desktop;
import java.io.File;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jetty.server.MultiPartFormInputStream.MultiPart;

import Exception.EmptyDescriptionException;
import Exception.InvalidAmountException;
import Model.Person;
import Model.Role;
import Model.Ticket;
import Model.TicketStatus;
import Model.TicketType;
import io.javalin.http.Handler;

public class Helper {

	private static Person person;

	public static Person getPerson() {
		return person;
	}

	public static void setPerson(Person person) {
		Helper.person = person;
	}
	
	
	public static List<Ticket> populateTickets(ResultSet result) throws SQLException {
		List<Ticket> tickets = new ArrayList<>();
		while (result.next()) {
			Ticket ticket = new Ticket();
			ticket = new Ticket();
			ticket.setID(result.getInt(1));
			ticket.setAmount(result.getDouble(2));
			ticket.setDescription(result.getString(3));
			ticket.setEmployee_id(result.getInt(4));
			if (result.getInt(5) == 1)
				ticket.setStatus(TicketStatus.PENDING);
			else if (result.getInt(5) == 2)
				ticket.setStatus(TicketStatus.APPROVED);
			else
				ticket.setStatus(TicketStatus.DENIED);
			if (result.getInt(6) == 1)
				ticket.setType(TicketType.TRAVEL);
			else if (result.getInt(6) == 2)
				ticket.setType(TicketType.LODGING);
			else if (result.getInt(6) == 3)
				ticket.setType(TicketType.FOOD);
			else
				ticket.setType(TicketType.OTHER);
			ticket.setReceipt_image(result.getString(7));
			ticket.setCreated_date(result.getTimestamp(8));
			tickets.add(ticket);
			System.out.println(ticket.toString());
			
		}
		return tickets;
	}
	
	
	public static void processFile(MultiPart  multiPart)
	{
		try  
		{  
			ClassLoader classloader = Thread.currentThread().getContextClassLoader();
			InputStream is = classloader.getResourceAsStream("images/receipt1.jpg");       //opens the specified file  
		}  
		catch(Exception e)  
		{  
		e.printStackTrace();  
		}  
	}
	
	/*
	 * 
	 * public Handler handleSubmitTicket = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.MANAGER) {
			context.status(401);
			context.result("Only employees are authorized to submit new tickets");
		}
		else {
			
			Ticket ticket = objectMapper.readValue(context.body(), Ticket.class);
			if (ticket.getAmount() <= 0) {
				context.status(400);
				context.result("Please enter a valid amount");
				throw new InvalidAmountException();

			} else if (ticket.getDescription().isEmpty()) {
				context.status(400);
				context.result("Please enter a valid description");
				throw new EmptyDescriptionException();

			}else if (ticket.getReceiptFile()!= null)
			{
				Helper.processFile(ticket.getReceiptFile());
			}
			ticket.setEmployee_id(Helper.getPerson().getID());
			LocalDateTime now = LocalDateTime.now();
			Timestamp timestamp = Timestamp.valueOf(now);
			ticket.setCreated_date(timestamp);
			ticketService.submitNewTicketByEmloyee(ticket);
			context.status(201);

			context.result(objectMapper.writeValueAsString(ticket));
		}
	};

	 */

	
}
