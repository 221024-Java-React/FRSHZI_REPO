package Controller;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.databind.ObjectMapper;
import DAO.ITicketDAO;
import Exception.EmptyDescriptionException;
import Exception.InvalidAmountException;
import Model.Role;
import Model.Ticket;
import Service.TicketService;
import Service.TicketServiceFactory;
import Utils.Helper;
import io.javalin.http.Handler;
import io.javalin.http.UploadedFile;

public class TicketController {

	ITicketDAO iTicketDAO;
	private ObjectMapper objectMapper;
	private TicketService ticketService;

	public TicketController(ITicketDAO iTicketDAO) {
		super();
		this.objectMapper = new ObjectMapper();
		this.iTicketDAO = iTicketDAO;
		ticketService = TicketServiceFactory.createTicketService(iTicketDAO);
	}

	public Handler handleSubmitTicket = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.MANAGER) {
			context.status(401);
			context.result("Only employees are authorized to submit new tickets");
		} else {

			//Ticket ticket = objectMapper.readValue(context.body(), Ticket.class);
			double amount = Double.parseDouble(context.formParam("amount"));
			String description = context.formParam("description");
			int type =  Integer.parseInt(context.formParam("type"))
					;
			UploadedFile  uploadedFile = context.uploadedFile("receiptFile");
			
			if (amount <= 0) {
				context.status(400);
				context.result("Please enter a valid amount");
				throw new InvalidAmountException();

			} else if (ticket.getDescription().isEmpty()) {
				context.status(400);
				context.result("Please enter a valid description");
				throw new EmptyDescriptionException();

			} else {
				ticket.setEmployee_id(Helper.getPerson().getID());
				LocalDateTime now = LocalDateTime.now();
				Timestamp timestamp = Timestamp.valueOf(now);
				ticket.setCreated_date(timestamp);
				ticketService.submitNewTicketByEmloyee(ticket);
				context.status(201);

				context.result(objectMapper.writeValueAsString(ticket));
			}
		}
	};
	public Handler handleViewTicketHistory = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.MANAGER) {
			context.status(401);
			context.result("Only employees are authorized to view their tickets history");
		} else {

			List<Ticket> pList = ticketService.viewTicketHistory();
			context.status(200);
			context.result(objectMapper.writeValueAsString(pList));
		}

	};

	public Handler handleGetTicketsByType = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.MANAGER) {

			context.status(401);
			context.result("Only employees are authorized to view their tickets by type");
		} else {
			Map<String, String> body = objectMapper.readValue(context.body(), LinkedHashMap.class);
			List<Ticket> pList = ticketService.getTicketsBYType(body.get("type"));
			context.status(200);
			context.result(objectMapper.writeValueAsString(pList));
		}
	};

	public Handler handleGetTicketsByStatus = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.MANAGER) {
			context.status(401);
			context.result("Only employees are authorized to view their tickets by status");
		} else {
			Map<String, String> body = objectMapper.readValue(context.body(), LinkedHashMap.class);
			List<Ticket> pList = ticketService.getTicketsBYStatus(body.get("status"));
			context.status(200);
			context.result(objectMapper.writeValueAsString(pList));
		}
	};

	public Handler handleViewPendingTickets = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.EMPLOYEE) {
			context.status(401);
			context.result("Only managers can view all pending tickets");
		} else {
			List<Ticket> pList = ticketService.getPendingTickets();
			context.status(200);
			context.result(objectMapper.writeValueAsString(pList));
		}
	};

	public Handler handleProcessPendingTickets = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.EMPLOYEE) {
			context.status(401);
			context.result("Only managers can process pending tickets");
		} else {
			List<Ticket> tickets = ticketService.processPendingTickets();

			context.status(200);
			context.result("Tickets were processed");
		}
	};

	public Handler handleProcessPendingTicket = (context) -> {
		if (Helper.getPerson() == null || Helper.getPerson().getRole() == Role.EMPLOYEE) {
			context.status(401);
			context.result("Only managers can process pending ticket");
		} else {
			Map<String, Integer> body = objectMapper.readValue(context.body(), LinkedHashMap.class);
			ticketService.processPendingTicket(body.get("ticket_id"), body.get("status"));

			context.status(200);
			if (body.get("status") == 2)
				context.result("Ticket " + body.get("ticket_id") + " was approved");
			else
				context.result("Ticket " + body.get("ticket_id") + " was denied");
		}
	};

}
